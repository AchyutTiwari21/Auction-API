// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  local
  google
}

model User {
  id            String        @id @default(uuid())
  googleId      String?       @unique
  password      String?     
  name          String
  username      String        @unique
  picture       String?
  email         String        @unique
  dob           DateTime?
  totalBids     Int           @default(0) // Total number of bids placed by the user
  refreshToken  String?       // Stores refresh token
  authProvider  AuthProvider  @default(local)
  bids          Bid[]
  callLogs      CallLog[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}


model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  imageUrl    String?
  auctions    Auction[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Auction {
  id            String     @id @default(uuid())
  productId     String
  startTime     DateTime
  endTime       DateTime
  currentBidId  String?    @unique // FK to Bid (nullable)
  product       Product    @relation(fields: [productId], references: [id])
  currentBid    Bid?       @relation("CurrentHighestBid", fields: [currentBidId], references: [id])
  bids          Bid[]
  callLogs      CallLog[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Bid {
  id                               String   @id @default(uuid())
  amount                           Float
  userId                           String
  auctionId                        String
  user                             User     @relation(fields: [userId], references: [id])
  auction                          Auction  @relation(fields: [auctionId], references: [id])
  auctionWithThisAsCurrentHighest  Auction? @relation("CurrentHighestBid") // ‚Üê MATCHED relation name
  createdAt                        DateTime @default(now())
}

model CallLog {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  email      String
  auction    Auction? @relation(fields: [auctionId], references: [id])
  auctionId  String?
  startedAt  DateTime
  endedAt    DateTime?
  status     String   // e.g. 'completed', 'missed', 'failed'
  createdAt  DateTime @default(now())
}

